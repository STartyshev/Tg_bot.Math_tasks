from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import buttons
import texts
from number_of_common_numbers import pre_main_menu_number_of_common_numbers, router as ft_router


API_TOKEN = '*'
tg_bot = Bot(token=API_TOKEN, parse_mode='HTML')
disp = Dispatcher(bot=tg_bot)
users_dict = dict()


class FSMMathTasks(StatesGroup):
    default_state = State()
    info = State()
    auth_name = State()
    auth_age = State()
    pass_auth = State()
    ready_to_tasks = State()
    tasks = State()
    first_task = State()
    second_task = State()
    third_task = State()


@disp.message(Command('start'))
async def welcome_message(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    if message.from_user.id not in users_dict.keys():
        users_dict[message.from_user.id] = {'name': '', 'age': 0, 'user_auth': False}
    await message.answer(
        text=texts.welcome_message,
        reply_markup=buttons.welcome_menu()
    )
    await state.set_state(FSMMathTasks.default_state)


@disp.message(Command('tasks'), StateFilter(FSMMathTasks.default_state, FSMMathTasks.ready_to_tasks))
@disp.callback_query(F.data == 'tasks', StateFilter(FSMMathTasks.default_state, FSMMathTasks.ready_to_tasks))
async def tasks_menu(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑–∞–¥–∞—á.
    """
    if isinstance(callback, CallbackQuery):
        await callback.answer()
        await callback.message.answer(text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞—á</b>', reply_markup=buttons.tasks_menu())
    else:
        await callback.answer(text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞—á</b>', reply_markup=buttons.tasks_menu())
    await state.set_state(FSMMathTasks.tasks)


@disp.message(
    Command('info'),
    StateFilter(
        FSMMathTasks.default_state, FSMMathTasks.pass_auth, FSMMathTasks.ready_to_tasks,
        FSMMathTasks.tasks
    )
)
@disp.callback_query(
    F.data == 'info',
    StateFilter(
        FSMMathTasks.default_state, FSMMathTasks.pass_auth, FSMMathTasks.ready_to_tasks,
        FSMMathTasks.tasks
    )
)
async def info(callback: CallbackQuery | Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    if users_dict[callback.from_user.id]['user_auth']:
        if isinstance(callback, CallbackQuery):
            await callback.answer()
            await callback.message.answer(text=texts.help_with_auth)
        else:
            await callback.answer(text=texts.help_with_auth)
        await state.set_state(FSMMathTasks.info)
        await go_to_tasks(callback, state)
    else:
        if isinstance(callback, CallbackQuery):
            await callback.answer()
            await callback.message.answer(text=texts.help_without_auth, reply_markup=buttons.user_auth())
        else:
            await callback.answer(text=texts.help_without_auth, reply_markup=buttons.user_auth())
        await state.set_state(FSMMathTasks.info)


@disp.callback_query(F.data == 'user_auth', StateFilter(FSMMathTasks.info))
async def user_auth(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏.
    """
    await callback.answer()
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:')
    await state.set_state(FSMMathTasks.auth_name)


@disp.message(StateFilter(FSMMathTasks.auth_name))
async def auth_name(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∑–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞.
    """
    users_dict[message.from_user.id]['name'] = message.text
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await state.set_state(FSMMathTasks.auth_age)


@disp.message(StateFilter(FSMMathTasks.auth_age), F.text.isdigit())
async def auth_age(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∑–∞–ø–∏—Å—å –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    if int(message.text) > 5:
        users_dict[message.from_user.id]['age'] = message.text
        users_dict[message.from_user.id]['user_auth'] = True
        await message.answer(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
        await state.update_data(users_dict=users_dict)
        await go_to_tasks(message, state)
    else:
        await message.reply(
            text='–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <u>–±–æ–ª—å—à–µ 5 –ª–µ—Ç</u> '
                 '(–ø–æ–º–Ω–∏: –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º).\n'
                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )


@disp.message(StateFilter(FSMMathTasks.auth_age))
async def incorrect_age(message: Message):
    await message.reply(
        text='<b>–í–æ–∑—Ä–∞—Å—Ç</b> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <u>—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</u>.\n'
             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    )


@disp.callback_query(F.data == 'pass_auth', StateFilter(FSMMathTasks.info))
async def go_to_tasks(callback: CallbackQuery | Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∑–∞–¥–∞—á.
    """
    await state.set_state(FSMMathTasks.ready_to_tasks)
    if isinstance(callback, CallbackQuery):
        await callback.answer()
        await callback.message.answer(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–∞–º?', reply_markup=buttons.go_to_tasks())
    else:
        await callback.answer(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–∞–º?', reply_markup=buttons.go_to_tasks())


@disp.callback_query(F.data == 'first_task', StateFilter(FSMMathTasks.tasks))
async def first_task(callback: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏.
    """
    await callback.answer()
    await state.set_state(FSMMathTasks.first_task)
    await pre_main_menu_number_of_common_numbers(callback, state)


@disp.callback_query(F.data == 'second_task', StateFilter(FSMMathTasks.ready_to_tasks))
async def second_task():
    pass


@disp.callback_query(F.data == 'third_task', StateFilter(FSMMathTasks.ready_to_tasks))
async def third_task():
    pass


@disp.message(
    StateFilter(
        FSMMathTasks.default_state, FSMMathTasks.info, FSMMathTasks.pass_auth,
        FSMMathTasks.ready_to_tasks, FSMMathTasks.tasks
    )
)
async def other_messages(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä.
    """
    await message.reply(text='ü§î –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.')


if __name__ == '__main__':
    disp.include_router(ft_router)
    disp.run_polling(tg_bot, close_bot_session=True)
